import org.jetbrains.gradle.ext.GradleTask

import java.nio.file.Files
import java.nio.file.StandardOpenOption

//file:noinspection GroovyUnusedCatchParameter
buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        maven {
            url 'https://storage.googleapis.com/r8-releases/raw'
        }

        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.0'
        classpath "gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:1.1.7"
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
    id "idea"
}

//noinspection JavaPluginLanguageLevel
apply plugin: "java"
//noinspection JavaPluginLanguageLevel
apply plugin: "java-library"
apply plugin: "org.jetbrains.gradle.plugin.idea-ext"
apply plugin: "craftutils"

//****************************//
// Setting up main properties //
//****************************//

craftutils {
    projectName = "Ultracraft"
    projectVersion "0.1.0"
    projectGroup "com.ultreon.craft"
    projectId "ultracraft"
    production true

    coreProject project(":core")
    desktopProject project(":desktop")
}

//**********************//
//     Repositories     //
//**********************//
repositories {
    mavenCentral()
    mavenLocal()
    google()
    maven {
        name "Atlassian"
        url "https://maven.atlassian.com/3rdparty/"
    }
    maven {
        name "Maven Central"
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        name "RuneLite"
        url "https://repo.runelite.net/"
    }
    maven {
        name "JitPack"
        url 'https://jitpack.io'
    }
    flatDir {
        name "Project Libraries"
        dirs "${projectDir}/libs"
    }
}

/*****************
 * Configurations
 */
beforeEvaluate {
    configurations {
        // configuration that holds jars to include in the jar
        implementation {
            canBeResolved true
        }
        include {
            canBeResolved true
        }
        addToJar {
            canBeResolved true
        }
    }

    /***************
     * Dependencies
     */
    dependencies {
        // Projects
        implementation(project(":core"))
        implementation(project(":desktop"))
    }
}

allprojects {
    apply plugin: "maven-publish"

    ext {
        app_name = "Ultreon Craft"
        gdx_version = '1.11.0'
        robo_vm_version = '2.3.16'
        box_2d_lights_version = '1.5'
        ashley_version = '1.7.4'
        ai_version = '1.8.2'
        gdx_controllers_version = '2.2.3'
    }

    publishing {
        publications {

        }
        repositories {

        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven {
            name "JitPack"
            url 'https://jitpack.io'
        }
        maven {
            name "Maven Central"
            url "https://repo1.maven.org/maven2/"
        }
        maven {
            name "SonaType Releases"
            url "https://oss.sonatype.org/content/repositories/releases"
        }
        maven {
            name "SonaType Snapshots"
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        maven {
            name "FabricMC"
            url "https://maven.fabricmc.net/"
        }
        maven {
            name "QuiltMC"
            url "https://maven.quiltmc.org/repository/release/"
        }
        flatDir {
            name "Project Libraries"
            dirs "${projectDir}/libs"
        }
        flatDir {
            name "Project Libraries"
            dirs "${rootProject.projectDir}/libs"
        }
    }

    dependencies {

    }
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + " Version: " + System.getProperty("os.version"))

println("Current version: " + version)
println("Project: " + group + ":" + name)

def launchFile = file("$projectDir/build/craftutils/launch.cfg")

evaluationDependsOnChildren()

idea{
    project{
        settings {
            withIDEADir { File dir ->
                println("Callback 1 executed with: " + dir.absolutePath)
            }

            runConfigurations {
                "Ultracraft"(org.jetbrains.gradle.ext.Application) {                       // Create new run configuration "MyApp" that will run class foo.App
                    jvmArgs = "-Xmx2g -Dloader.skipMcProvider=true -Dfabric.dli.config=$launchFile.path -Dfabric.dli.env=CLIENT -Dfabric.dli.main=org.quiltmc.loader.impl.launch.knot.KnotClient"
                    mainClass = 'net.fabricmc.devlaunchinjector.Main'
                    moduleName = idea.module.name + ".desktop.main"
                    workingDirectory = "$projectDir/run/"
                    programParameters = "--gameDir=."
                }
            }
        }
    }
}
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
