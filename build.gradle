//file:noinspection GroovyUnusedCatchParameter

import org.jetbrains.gradle.ext.Application

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

import static java.lang.System.getenv

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.8.0'
        classpath "com.google.code.gson:gson:2.8.9"
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id "org.panteleyev.jpackageplugin" version "1.5.0"
    id 'com.github.johnrengelman.shadow' version '7.+'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

//****************************//
// Setting up main properties //
//****************************//

version project_version
group project_group

archivesBaseName = archives_base_name

java {
    withSourcesJar()
    withJavadocJar()
}

//**********************//
//     Repositories     //
//**********************//
repositories {
    mavenCentral()
    mavenLocal()
    google()
    jcenter()
    maven {
        name "Atlassian"
        url "https://maven.atlassian.com/3rdparty/"
    }
    maven {
        name "Maven Central"
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        name "RuneLite"
        url "https://repo.runelite.net/"
    }
    maven {
        name "JitPack"
        url 'https://jitpack.io'
    }
    flatDir {
        name "Project Libraries"
        dirs "${projectDir}/libs"
    }
}

/*****************
 * Configurations
 */
configurations {
    // configuration that holds jars to include in the jar
    implementation {
        canBeResolved true
    }
    include {
        canBeResolved true
    }
    addToJar {
        canBeResolved true
    }
}

/***************
 * Dependencies
 */
dependencies {
    // Projects
    shadow(runtimeOnly project(":core")) { transitive false }
    shadow(runtimeOnly project(":desktop")) { transitive false }
    implementation(runtimeOnly project(":core"))
    implementation(runtimeOnly project(":desktop"))
}

allprojects {
    apply plugin: "maven-publish"
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "idea"
    apply plugin: "groovy"

    ext {
        app_name = "Ultreon Craft"
        gdx_version = '1.11.0'
        robo_vm_version = '2.3.16'
        box_2d_lights_version = '1.5'
        ashley_version = '1.7.4'
        ai_version = '1.8.2'
        gdx_controllers_version = '2.2.1'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/Ultreon/ultreon-craft"
                credentials {
                    username = getenv("GITHUB_ACTOR")
                    password = getenv("GITHUB_TOKEN")
                }
            }
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven {
            name "JitPack"
            url 'https://jitpack.io'
        }
        maven {
            name "Maven Central"
            url "https://repo1.maven.org/maven2/"
        }
        flatDir {
            name "Project Libraries"
            dirs "${projectDir}/libs"
        }
        flatDir {
            name "Project Libraries"
            dirs "${rootProject.projectDir}/libs"
        }
    }

    dependencies {

    }

    publish.dependsOn build
}

// task to add addons.json to all relevant folders
task replaceResources(type: Copy) {
    from("src/main/resources/META-INF/addons.json")
    outputs.upToDateWhen {
        false
    }

    filter { line -> line.replaceAll('\\\$\\\$ADDON_VERSION\\\$\\\$', version.toString()) }
    into new File(processResources.destinationDir, "META-INF")
}

processResources {
    exclude 'META-INF/addons.json'
    finalizedBy replaceResources
}

jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Ultreon Craft',
                'Implementation-Vendor': 'Ultreon Team',
                'Implementation-Version': project.version,
                'Main-Class': 'com.ultreon.craft.DesktopLauncher',
                'Multi-Release': 'true'
    }

    from {
        compileJava.outputs
    }
    from {
        processResources.outputs
    }

    from(configurations.addToJar.collect {
        zipTree(it)
    })

    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

test {
    useJUnitPlatform()
}

tasks.create('prepareRun', {
    Files.createDirectories(Paths.get(projectDir.getAbsolutePath(), "run"))
})

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

task packedJar(type: Jar) {    dependsOn ":jar"

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Ultreon Craft',
                'Implementation-Vendor': 'Ultreon Team',
                'Implementation-Version': "1.0-indev1",
                'Main-Class': 'com.ultreon.premain.PreMain',
                'Multi-Release': 'true'
    }

    archivesBaseName = "ultreon-craft"

    from zipTree(jar.archiveFile.get())
    classifier "packed"
    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    from {
        configurations.include.collect { it.isDirectory() ? it : zipTree(it) }
    }
    doLast {
        copy {
            from archiveFile
            into buildDir
            rename ".*", "packed.jar"
        }
    }
}

build {
//    mustRunAfter ":packedJar"
}

task createExec {
    doFirst {
        if (!file("build").exists()) {
            mkdir "build"
        }
        mkdir "build/exec/"
        if (file("build/exec/lib/").exists()) {
            delete fileTree("build/exec/lib/")
        }
        copy {
            from file("bin/start.bat")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-unix.sh")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-mac.sh")
            into file("build/exec/")
        }
        copy {
            from jar.outputs.files.singleFile
            into file("build/exec/")
            rename ".*", "ultreon-craft.jar"
        }
        mkdir "build/exec/lib/"
        copy {
            from fileTree("build/dependencies/")
            into file("build/exec/lib/")
        }
    }
}

artifacts {
//    packedJar
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

task("copyDependencies", type: Copy) {
    from(configurations.runtimeClasspath)
    into("$buildDir/jars")
}

task("copyJar", type: Copy) {
    from(tasks.jar)
    into("$buildDir/jars")
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + " Version: " + System.getProperty("os.version"))

println("Current version: " + version)
println("Project: " + group + ":" + archivesBaseName)
println("Bulding a Java " + compileJava.targetCompatibility + " project...")

mkdir("$buildDir/ultreon-craft")

jpackage {
    dependsOn("build", "copyDependencies", "copyJar")

    input  = "$projectDir/jars"
    destination = "$buildDir/dist"

    app_name = project.property("app_name").toString()
    appVersion = project.version.toString()
    vendor = "Ultreon Team"
    copyright = "Copyright (c) 2022 Ultreon Team"
    runtimeImage = System.getProperty("java.home")

    mainJar = shadowJar.archiveFileName.get()
    mainClass = "com.ultreon.craft.DesktopLauncher"

    destination = "$buildDir/dist"

    licenseFile = "$projectDir/package/LICENSE.txt"

    javaOptions = [ "-Dfile.encoding=UTF-8" ]

    aboutUrl = "https://github.com/Ultreon/ultreon-craft"

    mac {
        icon = "icons/icon.icns"
        macPackageIdentifier = "com.ultreon.browser"
        macPackageName = "ultreon-browser"
        appVersion = packageVersion.replace(Regex("(\\d+\\.\\d+\\.\\d+).*"), "\$1")
    }

    linux {
        icon = "icons/icon.png"
        linuxPackageName = "ultreon-browser"
        linuxDebMaintainer = "Ultreon Team"
        linuxRpmLicenseType = "Ultreon API License v1.1"
        linuxAppRelease = "2"
        linuxShortcut = true
        appVersion = project.version.toString()
    }

    windows {
        icon = "icons/icon.ico"
        winMenu = true
        winDirChooser = true
        winConsole = false
        winPerUserInstall = true
        winShortcutPrompt = true
        winShortcut = false
        winUpgradeUuid = "36cb25da-b6d1-4104-9607-9077b7449668"
        winMenuGroup = "Ultreon Team"
        appVersion = (project.version).toString().replaceAll("-cb\\.\\d+", "").replace("+", ".")
    }
}

idea{
    project{
        settings {
            withIDEADir { File dir ->
                println("Callback 1 executed with: " + dir.absolutePath)
            }

            runConfigurations {
                "Ultreon Craft"(Application) {                       // Create new run configuration "MyApp" that will run class foo.App
                    jvmArgs = "-Xmx2G"
                    mainClass = 'com.ultreon.craft.DesktopLauncher'
                    moduleName = idea.module.name + ".desktop.main"
                    workingDirectory = "$projectDir/run/"
                    programParameters = "--dev"
                }
            }
        }
    }
}
